[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]
recover_velocity = 50.

[display_status]

[respond]
default_type = echo

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 10.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f407xx_3B003C001147313335343634-if00
restart_method = command

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 5.0

[stepper_x]
step_pin = PA3
dir_pin = PA4
enable_pin = !PA1
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = PF2
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 25
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PA2
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = PC2
dir_pin = PC3
enable_pin = !PC1
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = PC15
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 25
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PC0
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z]
step_pin = PB10
dir_pin = PB11
enable_pin = !PE15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32
endstop_pin = PC13
position_max = 310
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = 0.940

[tmc2209 stepper_z]
uart_pin = PE14
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PE11
dir_pin = !PE12
enable_pin = !PE10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PE9
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PE7
dir_pin = PE8
enable_pin = !PG1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PG0
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z3]
step_pin = PF13
dir_pin = !PF14
enable_pin = !PF12
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z3]
uart_pin = PF11
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = PB0
dir_pin = PB1
enable_pin = !PC5
rotation_distance = 22.6789511
gear_ratio = 50:17
microsteps = 32
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = PB9
sensor_type = PT1000
sensor_pin = PF3
min_temp = 10
max_temp = 270
max_power = 1.0
min_extrude_temp = 170
max_extrude_only_distance = 150
control = pid
pid_kp = 26.213
pid_ki = 1.304
pid_kd = 131.721

[tmc2209 extruder]
uart_pin = PC4
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = PD12
sensor_type = Generic 3950
sensor_pin = PA0
max_power = 0.6
min_temp = 0
max_temp = 120
control = pid
pid_kp = 58.437
pid_ki = 2.347
pid_kd = 363.769

[probe]
pin = PF4
x_offset = 0
y_offset = 25.0
z_offset = 0
speed = 10.0
samples = 3
samples_result = median
sample_retract_dist = 3.0
samples_tolerance = 0.006
samples_tolerance_retries = 3

[fan]
pin = PB7
kick_start_time = 0.5
off_below = 0.10

[heater_fan hotend_fan]
pin = PB8
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[controller_fan controller_fan]
pin = PC6
kick_start_time = 0.5
heater = heater_bed

[heater_fan exhaust_fan]
pin = PE5
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0
heater = heater_bed
heater_temp = 60
fan_speed = 1.0

[output_pin case_light]
pin = PE6
pwm = false
shutdown_value = 0
value = 1

[idle_timeout]
timeout = 1800

[safe_z_home]
home_xy_position = 232,347
speed = 100
z_hop = 10

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 100
horizontal_move_z = 10
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[board_pins]
aliases = 
	
	EXP1_1=PG5, EXP1_2=PG4,
	EXP1_3=PG3, EXP1_4=PG2,
	EXP1_5=PD15, EXP1_6=PD14,
	EXP1_7=PD13, EXP1_8=PD11,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PD10, EXP2_4=PB12,
	EXP2_5=PD9, EXP2_6=PB15,
	EXP2_7=PD8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=<5V>

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.5
initial_blue = 0.0
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[filament_switch_sensor filament_sensor]
pause_on_runout = True
runout_gcode = 
	M600
switch_pin = PC14

[gcode_macro G32]
gcode = 
	SAVE_GCODE_STATE NAME=STATE_G32
	G90
	G28
	QUAD_GANTRY_LEVEL
	NOZZLE_CLEAN
	G28
	
	
	
	
	
	
	
	
	
	G0 X175 Y175 Z30 F3600
	
	RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro PRINT_START]
gcode = 
	G32
	G90
	G1 Z20 F3000
	NOZZLE_PRIME

[gcode_macro PRINT_END]
gcode = 
	
	{% set th = printer.toolhead %}
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
	
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	
	M400
	G92 E0
	G1 E-5.0 F1800
	
	TURN_OFF_HEATERS
	
	G90
	G0 X{x_safe} Y{y_safe} Z{z_safe} F20000
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600
	M107
	
	BED_MESH_CLEAR
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro M600]
description = Executes a color change by pausing the printer an unloading the filament.
gcode = 
	PAUSE
	UNLOAD_FILAMENT
	M117 Please load new filament and resume
	RESPOND MSG="Please load new filament and resume"

[gcode_macro UNLOAD_FILAMENT]
description = Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode = 
	SAVE_GCODE_STATE NAME=unload_state
	G91
	{% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
	M117 Heating...
	
	M104 S{params.TEMP|default(220, true)}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
	{% endif %}
	M117 Unloading filament...
	
	G0 E-5 F3600
	
	G4 P3000
	
	G0 E5 F3600
	
	G0 E-15 F3600
	
	G0 E-130 F300
	M117 Filament unloaded!
	RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
	RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro LOAD_FILAMENT]
description = Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode = 
	SAVE_GCODE_STATE NAME=load_state
	G91
	
	{% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
	M117 Heating...
	M104 S{params.TEMP|default(220, true)}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
	{% endif %}
	M117 Loading filament...
	
	G0 E100 F600
	
	G4 P1000
	
	G0 E40 F100
	
	M400e
	M117 Filament loaded!
	RESPOND MSG="Filament loaded!"
	RESTORE_GCODE_STATE NAME=load_state

[gcode_macro NOZZLE_CLEAN]
description = wipes nozzle on brush to clean it
gcode = 
	G90
	G1 X265 Y350 F6000
	G1 Z0.5 F3000
	G1 X305 Y350 F10000
	G1 X265 Y350 F10000
	G1 X305 Y350 F10000
	G1 X265 Y350 F10000
	G1 X305 Y350 F10000
	G1 X265 Y350 F10000
	G1 Z10 F6000

[gcode_macro NOZZLE_PRIME]
description = prime the nozzle before printing
gcode = 
	G92 E0
	G1 E-3 F1800
	G1 X0 Y0 F10000
	G1 Z0.3 F500
	G92 E0
	G1 E3 F500
	G92 E0
	G1 E-0.30000 F3600
	G1 Z0.2500 F1000
	G1 X350 Y0 E50 F1000
	G92 E0
	G1 E-0.30000 F5400
	G1 Z10 F500
